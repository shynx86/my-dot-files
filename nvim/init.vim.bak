call plug#begin('~/.vim/plugged')
  "Plug 'scrooloose/nerdtree'
  " Git status on nerdtree
  "Plug 'Xuyuanp/nerdtree-git-plugin'
  " Comment plugin
  Plug 'scrooloose/nerdcommenter'
  " Coc
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  " Nord theme
  "Plug 'arcticicestudio/nord-vim'
  Plug 'arcticicestudio/nord-vim'
  " GruvBox theme
  "Plug 'morhetz/gruvbox'
  " Solarized theme
  "Plug 'altercation/vim-colors-solarized'
  " Vim icon
  Plug 'ryanoasis/vim-devicons'
  " Tree and file explorer
  Plug 'kyazdani42/nvim-tree.lua'
  Plug 'kyazdani42/nvim-web-devicons'
  " Auto pairs
  Plug 'jiangmiao/auto-pairs'
  " Open search file
  "Plug 'nvim-telescope/telescope.nvim'
  " Status line
  " Plug 'famiu/feline.nvim'
  " Smooth on scroll
  Plug 'psliwka/vim-smoothie'
  " Control HJKL to move vim panel
  Plug 'christoomey/vim-tmux-navigator'
  "Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
  " Status of git
  Plug 'airblade/vim-gitgutter'
  " Code highlight
  " Plug 'HerringtonDarkholme/yats.vim'
  " Plug 'akinsho/bufferline.nvim'
  " Plug 'bling/vim-bufferline'
  Plug 'romgrk/barbar.nvim'
  Plug 'folke/which-key.nvim'
  " Code highlight
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'HerringtonDarkholme/yats.vim'
  Plug 'yuezk/vim-js'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'kdheepak/lazygit.nvim'
  Plug 'github/copilot.vim'
  Plug 'kchmck/vim-coffee-script'
  Plug 'voldikss/vim-floaterm'
  " Plug 'camspiers/animate.vim'
  Plug 'camspiers/lens.vim'
  "Plug 'itchyny/lightline.vim'
  Plug 'nvim-lualine/lualine.nvim'
  "Plug 'vim-airline/vim-airline'
  "Plug 'vim-airline/vim-airline-themes'
  "Plug 'powerline/powerline'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  "Tpope
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-haml'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-cucumber'
  Plug 'tpope/vim-abolish'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'vim-test/vim-test'
  "Plug 'projekt0n/github-nvim-theme'
  Plug 'sonph/onehalf', {'rtp': 'vim/'}
  Plug 'arzg/vim-colors-xcode'
  Plug 'kaicataldo/material.vim', { 'branch': 'main' }
  Plug 'morhetz/gruvbox'
  Plug 'projekt0n/github-nvim-theme'
  Plug 'zivyangll/git-blame.vim'
  "Plug 'tveskag/nvim-blame-line'
  " snippet
  "Plug 'SirVer/ultisnips'
  Plug 'mlaursen/vim-react-snippets'
  Plug 'NLKNguyen/papercolor-theme'
  Plug 'folke/tokyonight.nvim', { 'branch': 'main' }

call plug#end()

set completeopt=menu,menuone,noselect

let mapleader=" "
set tabstop=2
set shiftwidth=2
set expandtab
set number
set numberwidth=5
set ruler
set noshowmode
set laststatus=2
set hidden
set nocompatible
set list

set termguicolors
set fillchars+=vert:\ 
syntax on
syntax enable
filetype plugin indent on
"lualine
lua << EOF
  require('lualine').setup {
    options = {
      theme = 'tokyonight',
    },
  }
EOF

let g:tokyonight_style = "night"
let g:tokyonight_italic_functions = 1
let g:tokyonight_sidebars = [ "qf", "vista_kind", "terminal", "packer" ]
let g:tokyonight_lualine_bold = 1
let g:tokyonight_hide_inactive_statusline = 1
colorscheme tokyonight
set cursorline

hi! Normal ctermbg=none ctermfg=none guifg=none guibg=none
hi! clear CursorLine
hi! CursorLine  gui=underline cterm=underline

"vim test
let g:test#javascript#runner='jest'
nnoremap <silent> <leader>gg :LazyGit<CR>
nmap ++ <plug>NERDCommenterToggle
" Setup LazyGit
let g:lazygit_floating_window_winblend = 0 " transparency of floating window
let g:lazygit_floating_window_scaling_factor = 0.9 " scaling factor for floating window
let g:lazygit_floating_window_corner_chars = ['╭', '╮', '╰', '╯'] " customize lazygit popup window corner characters
let g:lazygit_floating_window_use_plenary = 0 " use plenary.nvim to manage floating window if available
let g:lazygit_use_neovim_remote = 1 " fallback to 0 if neovim-remote is not installed

nnoremap <silent><leader>1 <Cmd>:BufferGoto 1<CR>
nnoremap <silent><leader>2 <Cmd>:BufferGoto 2<CR>
nnoremap <silent><leader>3 <Cmd>:BufferGoto 3<CR>
nnoremap <silent><leader>4 <Cmd>:BufferGoto 4<CR>
nnoremap <silent><leader>5 <Cmd>:BufferGoto 5<CR>
nnoremap <silent><leader>6 <Cmd>:BufferGoto 6<CR>
nnoremap <silent><leader>7 <Cmd>:BufferGoto 7<CR>
nnoremap <silent><leader>8 <Cmd>:BufferGoto 8<CR>
nnoremap <silent><leader>9 <Cmd>:BufferGoto 9<CR>
nnoremap <silent><leader>bd <Cmd>:bdelete<CR>
" Map bufferline
noremap <Tab> :bnext<CR>
noremap <S-Tab> :bprev<CR>
noremap <C-q> :bdelete<CR>

let g:vim_jsx_pretty_colorful_config = 1 " default 0
let g:floaterm_keymap_toggle = '<F12>'
let g:floaterm_width = 0.9
let g:floaterm_height = 0.9
let g:gitgutter_map_keys = 0
let g:nord_cursor_line_number_background = 1
let g:nord_uniform_status_lines = 1
let g:nord_bold_vertical_split_line = 1
let g:nord_bold = 1
let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_underline = 1
let g:smoothie_speed_linear_factor=60
let g:smoothie_speed_exponentiation_factor=0.5

"========================================================
" NVIM-TREE CONFIGURATION
"========================================================
lua << EOF
require'nvim-tree'.setup {
  disable_netrw       = true,
  hijack_netrw        = true,
  open_on_setup       = false,
  ignore_ft_on_setup  = {},
  auto_close          = false,
  open_on_tab         = false,
  hijack_cursor       = false,
  update_cwd          = false,
  update_to_buf_dir   = {
    enable = true,
    auto_open = true,
  },
  diagnostics = {
    enable = false,
    icons = {
      hint = "",
      info = "",
      warning = "",
      error = "",
    }
  },
  update_focused_file = {
    enable      = false,
    update_cwd  = false,
    ignore_list = {}
  },
  system_open = {
    cmd  = nil,
    args = {}
  },
  filters = {
    dotfiles = false,
    custom = {}
  },
  git = {
    enable = true,
    ignore = true,
    timeout = 500,
  },
  view = {
    width = 40,
    height = 30,
    hide_root_folder = false,
    side = 'right',
    auto_resize = true,
    mappings = {
      custom_only = false,
      list = {}
    },
    number = false,
    relativenumber = false,
    signcolumn = "no"
  },
  trash = {
    cmd = "trash",
    require_confirm = true
  }
}
EOF
nnoremap <C-b> :NvimTreeToggle<CR>
nnoremap <C-f> :NvimTreeFindFile<CR>
nnoremap <silent><leader>v <Cmd>:vsp<CR>
nmap <silent> <leader>T :TestFile<CR>
highlight NvimTreeFolderIcon guibg=blue
let g:nvim_tree_icons = {
    \ 'default': '',
    \ 'symlink': '',
    \ 'git': {
    \   'unstaged': "✗",
    \   'staged': "✓",
    \   'unmerged': "",
    \   'renamed': "➜",
    \   'untracked': "★",
    \   'deleted': "",
    \   'ignored': "◌"
    \   },
    \ 'folder': {
    \   'arrow_open': "▼",
    \   'arrow_closed': "▶",
    \   'default': "",
    \   'open': "",
    \   'empty': "",
    \   'empty_open': "",
    \   'symlink': "",
    \   'symlink_open': "",
    \   }
    \ }
let g:nvim_tree_highlight_opened_files = 1 "0 by default, will enable folder and file icon highlight for opened files/directories.
let g:nvim_tree_add_trailing = 1 "0 by default, append a trailing slash to folder names

" FZF
let g:fzf_preview_window = ['right:50%', 'ctrl-/']
nnoremap <leader>ff <cmd>Files<cr>
nnoremap <leader>fr <cmd>Rg<cr>
nnoremap <leader>fa <cmd>Ag<cr>
nnoremap <leader>fb <cmd>Buffers<cr>
nnoremap <leader>fc <cmd>Commands<cr>
nnoremap <leader>fh <cmd>History<cr>
nnoremap <leader>gc <cmd>Commits<cr>

"let g:fzf_layout = { 'down': '30%' }
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let g:gutentags_ctags_exclude = ["*.min.js", "*.min.css", "build", "vendor", ".git", "node_modules", "*.vim/bundle/*"]

set foldmethod=syntax
set foldlevel=99

if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

